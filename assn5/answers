1. Your shell forks multiple child processes when executing piped commands. How does your implementation ensure that all child processes complete before the shell continues accepting user input? What would happen if you forgot to call waitpid() on all child processes?

waitpid() ensures all child processes finish before returning to the prompt.
Without it, the shell may spawn zombie processes or accept new input while previous commands are still running

2. The dup2() function is used to redirect input and output file descriptors. Explain why it is necessary to close unused pipe ends after calling dup2(). What could go wrong if you leave pipes open?

Leaving pipes open wastes resources and can cause deadlocks (processes waiting forever) or unexpected behavior (reading stale data)

3. Your shell recognizes built-in commands (cd, exit, dragon). Unlike external commands, built-in commands do not require execvp(). Why is cd implemented as a built-in rather than an external command? What challenges would arise if cd were implemented as an external process?

cd must change the parent shell’s directory.
If external, it would run in a child process and have no effect on the shell’s working directory

4. Currently, your shell supports a fixed number of piped commands (CMD_MAX). How would you modify your implementation to allow an arbitrary number of piped commands while still handling memory allocation efficiently? What trade-offs would you need to consider?

Replace fixed arrays with dynamic allocation (malloc()) for commands and pipes.
Trade-offs: More memory use, slower execution, and increased complexity

